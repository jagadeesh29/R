main()
install.packages("swirl")
swirl()
library(swirl)
swirl()
num_vect
num_vect<- c(0.5, 55, -10, 6)
tf <- num_vect<1
tf
tfg <- num_vect >= 6
num_vect >= 6
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
swirl()
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
(?boxplot())
(?boxplot)
skip()
skip()
skip()
swirl()
swirl()
library(swirl)
swirl()
install.packages("swirl")
library(swirl)
swirl()
swirl()
q()
library(swirl)
rm(list=ls())
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
skip()
skip()
skip()
play()
abline(regrline,col = 2
)
abline(regrline,lwd =5, col =3)
abline(regrline,lwd =10, col =3)
abline(regrline,lwd =3, col =6)
abline(regrline,lwd =3, col =6)
plot(child ~ parent , galton)
plot(jitter(child, 4) ~ parent , galton)
lm <- lm(child ~ parent, galton)
abline(lm, lwd=3, col=1)
abline(lm, lwd=3, col=2)
nxt()
main()
swirl()
skip()
skip()
mean(fit$residuals)
play()
cor(fit$residuals,galton$parent)
nxt()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
main()
main()
skip()
main()
q()
q()
attach(cars)
dim(cars)
head(cars)
str(cars)
scatter.smooth(x= speed, y= dist, main = "dist ~ speed")
par(mfrow=c(1, 2))  # divide graph area in 2 columns
boxplot(cars$speed, main="Speed", sub=paste("Outlier rows: ", boxplot.stats(cars$speed)$out))  # box plot for 'speed'
boxplot(cars$dist, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars$dist)$out))
library(e1071)
par(mfrow=c(1, 2))  # divide graph area in 2 columns
plot(density(cars$speed), main="Density Plot: Speed", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(cars$speed), 2)))  # density plot for 'speed'
polygon(density(cars$speed), col="red")
plot(density(cars$dist), main="Density Plot: Distance", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(cars$dist), 2)))  # density plot for 'dist'
polygon(density(cars$dist), col="red")
library(e1071)
par(mfrow=c(1, 2))  # divide graph area in 2 columns
plot(density(cars$speed), main="Density Plot: Speed", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(cars$speed), 2)))  # density plot for 'speed'
polygon(density(cars$speed), col="red")
plot(density(cars$dist), main="Density Plot: Distance", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(cars$dist), 2)))  # density plot for 'dist'
polygon(density(cars$dist), col="red")
cor(cars$speed, cars$dist)  # calculate correlation between speed and distance
lm <- lm(dist ~ speed, data = cars)
summary(lm)
print(lm)
# capture model summary as an object
modelSummary <- summary(linearMod)
# capture model summary as an object
modelSummary <- summary(lm)
# model coefficients
modelCoeffs <- modelSummary$coefficients
# get beta estimate for speed
beta.estimate <- modelCoeffs["speed", "Estimate"]
# get std.error for speed
std.error <- modelCoeffs["speed", "Std. Error"]
# calc t statistic
t_value <- beta.estimate/std.error
# calc p Value
p_value <- 2*pt(-abs(t_value), df=nrow(cars)-ncol(cars))
# fstatistic
f_statistic <- linearMod$fstatistic[1]
# parameters for model p-value calc
f <- summary(linearMod)$fstatistic
# fstatistic
f_statistic <- lm$fstatistic[1]
# parameters for model p-value calc
f <- summary(lm)$fstatistic
model_p <- pf(f[1], f[2], f[3], lower=FALSE)
model_p
AIC(lm)
BIC(lm)
set.seed(100)
sample <- sample(1:nrow(cars), .7*nrow(cars))
train_data <-  cars[sample,]
test_data <- cars[-sample,]
lin_mod <- lm(dist~speed, data = train_data)
summary(lin_mod)
pred <- predict(lin_mod,test_data)
actual_predic <- data.frame(cbind(actual = test_data$dist,predicted = pred))
actual_predic
corre_accur <- cor(actual_predic)
corre_accur
# Min-Max Accuracy Calculation
min_max_accuracy <- mean(apply(actuals_preds, 1, min) / apply(actuals_preds, 1, max))
# Min-Max Accuracy Calculation
min_max_accuracy <- mean(apply(actuals_predic, 1, min) / apply(actuals_predic, 1, max))
# Min-Max Accuracy Calculation
min_max_accuracy <- mean(apply(actual_predic, 1, min) / apply(actual_predic, 1, max))
mape <- mean(abs((actuals_preds$predicteds - actuals_preds$actuals))/actuals_preds$actuals)
mape <- mean(abs((actual_predic$predicted - actual_predic$actuals))/actual_predic$actual)
library(DAAG)
cvResults <- suppressWarnings(CVlm(df=cars, form.lm=dist ~ speed, m=5, dots=FALSE, seed=29, legend.pos="topleft",  printit=FALSE, main="Small symbols are predicted values while bigger ones are actuals."));  # performs the CV
attr(cvResults, 'ms')
cvResults <- suppressWarnings(CVlm(df=cars, form.lm=dist ~ speed, m=5, dots=FALSE, seed=29, legend.pos="topleft",  printit=FALSE, main="Small symbols are predicted values while bigger ones are actuals."));  # performs the CV
cvResults <- suppressWarnings(CVlm(df=cars, form.lm=dist ~ speed, m=5, dots=FALSE, seed=29, legend.pos="topleft",  printit=FALSE, main="Small symbols are predicted values while bigger ones are actuals."));  # performs the CV
attr(cvResults, 'ms')
cvResults <- suppressWarnings(CVlm(df=cars, form.lm=dist ~ speed, m=5, dots=FALSE, seed=29, legend.pos="topleft",  printit=FALSE, main="Small symbols are predicted values while bigger ones are actuals."));  # performs the CV
install.packages("mlbench")
library(mlbench)
data("BreastCancer")
dim(BreastCancer)
names(BreastCancer)
View(BreastCancer)
bc <- BreastCancer[complete.cases(BreastCancer), ]  # create copy
str(bc)
# remove id column
bc <- bc[,-1]
for (i in 1:9) {
bc[,i] <- as.numeric(as.character(bc[,i]))
}
View(bc)
str(bc)
table(bc$Class)
attach(bc)
glm(bc$Class ~ bc$Cell.shape,family = "binomial", data = bc)
# Accuracy
mean(y_pred == y_act)  # 94%
library(mlbench)
data("BreastCancer")
dim(BreastCancer)
names(BreastCancer)
bc <- BreastCancer[complete.cases(BreastCancer), ]  # create copy
attach(bc)
str(bc)
# remove id column
bc <- bc[,-1]
#convet factors into numeric
for (i in 1:9) {
bc[,i] <- as.numeric(as.character(bc[,i]))
}
str(bc)
table(bc$Class)
# Prep Training and Test data.
library(caret)
'%ni%' <- Negate('%in%')  # define 'not in' func
options(scipen=999)  # prevents printing scientific notations.
set.seed(100)
trainDataIndex <- createDataPartition(bc$Class, p=0.7, list = F)
trainData <- bc[trainDataIndex, ]
testData <- bc[-trainDataIndex, ]
# Class distribution of train data
table(trainData$Class)
# Down Sample
set.seed(100)
down_train <- downSample(x = trainData[, colnames(trainData) %ni% "Class"],
y = trainData$Class)
table(down_train$Class)
# Up Sample (optional)
set.seed(100)
up_train <- upSample(x = trainData[, colnames(trainData) %ni% "Class"],
y = trainData$Class)
table(up_train$Class)
# Build Logistic Model
logitmod <- glm(Class ~ Cl.thickness + Cell.size + Cell.shape, family = "binomial", data=down_train)
summary(logitmod)
pred <- predict(logitmod, newdata = testData, type = "response")
pred
# Recode factors
y_pred_num <- ifelse(pred > 0.5, 1, 0)
y_pred <- factor(y_pred_num, levels=c(0, 1))
y_act <- testData$Class
# Accuracy
mean(y_pred == y_act)  # 94%
# Recode factors
y_pred_num <- ifelse(pred > 0.5, 1, 0)
y_pred <- factor(y_pred_num, levels=c(0, 1))
y_act <- testData$Class
# Accuracy
mean(y_pred == y_act)  # 94%
# Change Y values to 1's and 0's
bc$Class <- ifelse(bc$Class == "malignant", 1, 0)
bc$Class <- factor(bc$Class, levels = c(0, 1))
# Accuracy
mean(y_pred == y_act)  # 94%
# install.packages('mlbench')
data(BreastCancer, package="mlbench")
bc <- BreastCancer[complete.cases(BreastCancer), ]  # keep complete rows
# remove id column
bc <- bc[,-1]
# convert to numeric
for(i in 1:9) {
bc[, i] <- as.numeric(as.character(bc[, i]))
}
# Change Y values to 1's and 0's
bc$Class <- ifelse(bc$Class == "malignant", 1, 0)
bc$Class <- factor(bc$Class, levels = c(0, 1))
# Prep Training and Test data.
library(caret)
'%ni%' <- Negate('%in%')  # define 'not in' func
options(scipen=999)  # prevents printing scientific notations.
set.seed(100)
trainDataIndex <- createDataPartition(bc$Class, p=0.7, list = F)
trainData <- bc[trainDataIndex, ]
testData <- bc[-trainDataIndex, ]
# Class distribution of train data
table(trainData$Class)
# Down Sample
set.seed(100)
down_train <- downSample(x = trainData[, colnames(trainData) %ni% "Class"],
y = trainData$Class)
table(down_train$Class)
# Up Sample (optional)
set.seed(100)
up_train <- upSample(x = trainData[, colnames(trainData) %ni% "Class"],
y = trainData$Class)
table(up_train$Class)
# Build Logistic Model
logitmod <- glm(Class ~ Cl.thickness + Cell.size + Cell.shape, family = "binomial", data=down_train)
summary(logitmod)
pred <- predict(logitmod, newdata = testData, type = "response")
pred
# Recode factors
y_pred_num <- ifelse(pred > 0.5, 1, 0)
y_pred <- factor(y_pred_num, levels=c(0, 1))
y_act <- testData$Class
# Accuracy
mean(y_pred == y_act)  # 94%
table(y_pred,y_act)
q()
q()
q()
churn_data <- read.csv("CHURN.txt", header = TRUE)
setwd("~/R/churn")
churn_data <- read.csv("CHURN.txt", header = TRUE)
library(randomForest)
library(tree)
library(caret)
library(Metrics)
churn <- churn_data
str(churn)
sapply(churn,class)
colSums(is.na(churn))
boxplot(churn$VMail.Message, main="vmail message", sub=paste("Outlier rows: ", boxplot.stats(churn$VMail.Message)$out))
boxplot(churn$Day.Mins, main="DAY mins", sub=paste("Outlier: ", boxplot.stats(churn$Day.Mins)$out))
boxplot(churn$VMail.Message, main="vmail message", sub=paste("Outlier rows: ", boxplot.stats(churn$VMail.Message)$out))
View(churn)
val1 <- churn[which(churn$Day.Mins >= 150)]
val1 <- churn[which(churn$Day.Mins <= 150)]
val1 <- churn[which(churn$Day.Mins <= 150),]
View(val1)
val1 <- churn[which(churn$Day.Mins <= 150 & churn$Day.Charge <= 20),]
View(val1)
summary(churn)
barplot(churn$Churn., col = red)
barplot(churn$Churn., col = "red"")
barplot(sum.churn,
ylim = c(0, 3000),
main = "Bar Graph of Churners and
Non-Churners",
col = "lightblue")
barplot(churn$Churn.,
ylim = c(0, 3000),
main = "Bar Graph of Churners and
Non-Churners",
col = "lightblue")
# churn$Churn. <- as.character(churn$Churn.)
#barchart
churn_var <- summary(churn$Churn.)
barplot(churn_var,
ylim = c(0, 3000),
main = "Bar Graph of Churners and
Non-Churners",
col = "lightblue")
barplot(churn_var,ylim = c(0, 3000),main = "Bar Graph of Churners and Non-Churners",col = "red")box(which = "plot",lty = "solid",col = "black")
barplot(churn_var,ylim = c(0, 3000),main = "Bar Graph of Churners and Non-Churners",col = "red")box(which = "plot",lty = "solid",col = "black")
barplot(churn_var,ylim = c(0, 3000),main = "Bar Graph of Churners and Non-Churners",col = "red")
box(which = "plot",lty = "solid",col = "black")
library(e1071)
par(mfrow = c(1,2))
barplot(churn_var,ylim = c(0, 3000),main = "Bar Graph of Churners and Non-Churners",col = "red")
barplot(churn_var,ylim = c(0, 3000),main = "Bar Graph of Churners and Non-Churners",col = "red")
barplot(churn_var,ylim = c(0, 3333),main = "Bar Graph of Churners and Non-Churners",col = "red")
box(which = "plot",lty = "solid",col = "black")
counts <- table(churn$Churn,
churn$Int.l.Plan,
dnn=c("Churn", "International Plan"))
counts
#Overlayed bar chart
barplot(counts,
legend = rownames(counts),
col = c("blue", "red"),
ylim = c(0, 3300),
ylab = "Count",
xlab = "International Plan",
main = "Comparison Bar Chart:
Churn Proportions by
International Plan")
box(which = "plot",
lty = "solid",
col="black")
# Create a table with sums for both variables
sumtable <- addmargins(counts,
FUN = sum)
sumtable
# Create a table of proportions over rows
row.margin <- round(prop.table(counts,margin = 1),4)*100
row.margin
# Create a table of proportions over columns
col.margin <- round(prop.table(counts,margin = 2),4)*100
col.margin
#Overlayed bar chart
barplot(counts,
legend = rownames(counts),
col = c("blue", "red"),
ylim = c(0, 3300),
ylab = "Count",
xlab = "International Plan",
main = "Comparison Bar Chart:
Churn Proportions by
International Plan")
box(which = "plot",
lty = "solid",
col="black")
# Create a table with sums for both variables
sumtable <- addmargins(counts,
FUN = sum)
sumtable
# Create a table of proportions over rows
row.margin <- round(prop.table(counts,margin = 1),4)*100
row.margin
# Create a table of proportions over columns
col.margin <- round(prop.table(counts,margin = 2),4)*100
col.margin
# Clustered Bar Chart, with legend
barplot(counts,
col = c("blue", "red"),
ylim = c(0, 3300),
ylab = "Count",
xlab = "International Plan",
main = "Churn Count by
International Plan",
beside = TRUE)
legend("topright",
c(rownames(counts)),
col = c("blue", "red"),
pch = 15,
title = "Churn")
box(which = "plot",
lty = "solid",
col="black")
# Clustered Bar Chart of Churn and International Plan with legend
barplot(t(counts),
col = c("blue", "green"),
ylim = c(0, 3300),
ylab = "Counts",
xlab = "Churn",
main = "International Plan Count by
Churn",
beside = TRUE)
legend("topright",
c(rownames(counts)),
col = c("blue", "green"),
pch = 15,
title = "Int'l Plan")
box(which = "plot",
lty = "solid",
col="black")
# Histogram of non-overlayed Customer Service Calls
hist(churn$CustServ.Calls,
xlim = c(0,10),
col = "lightblue",
ylab = "Count",
xlab = "Customer Service Calls",
main = "Histogram of Customer Service
Calls")
# Histogram of non-overlayed Customer Service Calls
hist(churn$CustServ.Calls,
xlim = c(0,10),
col = "orange",
ylab = "Count",
xlab = "Customer Service Calls",
main = "Histogram of Customer Service
Calls")
# Overlayed bar charts
ggplot() +
geom_bar(data = churn,
aes(x = factor(churn$CustServ.Calls),
fill = factor(churn$Churn)),
position = "stack") +
scale_x_discrete("Customer Service
Calls") +
scale_y_continuous("Percent") +
guides(fill=guide_legend(title="Churn"))
+
scale_fill_manual(values=c("blue",
"red"))
ggplot() +
geom_bar(data=churn,
aes(x = factor(churn$CustServ.Calls),
fill = factor(churn$Churn)),
position = "fill") +
scale_x_discrete("Customer Service Calls")
# Scatterplot of Evening Minutes and Day Minutes, colored by Churn
plot(churn$Eve.Mins,
churn$Day.Mins,
xlim = c(0, 400),
ylim = c(0, 400),
xlab = "Evening Minutes",
ylab = "Day Minutes",
main = "Scatterplot of Day
and Evening Minutes by
Churn",
col = ifelse(churn$Churn==
"True",
"red",
"blue"))
legend("topright",
c("True",
"False"),
col = c("red",
"blue"),
pch = c(16, 20),
title = "Churn")
# Scatterplot matrix
pairs( churn$Day.Mins+
churn$Day.Calls+
churn$Day.Charge)
# Scatterplot matrix
pairs( ~churn$Day.Mins+
churn$Day.Calls+
churn$Day.Charge)
